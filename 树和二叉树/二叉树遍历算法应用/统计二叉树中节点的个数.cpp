//统计二叉树结点的个数
int NodeCount(BiTree T){
  if(T == NULL){
    return 0;
  } 
  else return NodeCount(T->lchild) + NodeCount(T->rchild)+1;
}
       A
     /   \
    B     C
   /     / \
  D     E   F
```

#### 调用栈分析
| 步骤 | 当前结点 | 操作                              | 返回值累加过程               |
|------|----------|--------------------------------|------------------------------|
| 1    | A        | 计算左子树B的结点数               | → 进入B                      |
| 2    | B        | 计算左子树D的结点数               | → 进入D                      |
| 3    | D        | 左右子树均为空                    | 0+0+1=1 → 返回给B            |
| 4    | B        | 计算右子树（空）结点数             | 1+0+1=2 → 返回给A            |
| 5    | A        | 计算右子树C的结点数               | → 进入C                      |
| 6    | C        | 计算左子树E的结点数                | → 进入E                      |
| 7    | E        | 左右子树均为空                    | 0+0+1=1 → 返回给C            |
| 8    | C        | 计算右子树F的结点数               | → 进入F                      |
| 9    | F        | 左右子树均为空                    | 0+0+1=1 → 返回给C            |
| 10   | C        | 合并E和F的结果                     1+1+1=3 → 返回给A            |
| 11   | A        | 合并B和C的结果                   | 2+3+1=6 → 最终结果           |
